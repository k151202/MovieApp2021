{"ast":null,"code":"var _jsxFileName = \"/Users/taehyungkim/Documents/Code/khanflix/src/Routes/Detail/DetailContainer.js\";\nimport { moviesApi, tvApi } from \"api\";\nimport React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      location: {\n        pathname\n      }\n    } = props;\n    this.state = {\n      result: null,\n      error: null,\n      loading: true,\n      isMovie: pathname.includes(\"/movie/\")\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match: {\n        params: {\n          id\n        }\n      },\n      history: {\n        push\n      }\n    } = this.props;\n    const {\n      isMovie\n    } = this.state;\n    const parsedId = parseInt(id);\n\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n\n    let result = null;\n\n    try {\n      if (isMove) {\n        result = await moviesApi.movieDetail(parsedId);\n      } else {\n        result = await tvApi.tvDetail(parsedId);\n      }\n\n      console.log(result);\n    } catch {\n      this.setState({\n        error: \"Can't find anything!\"\n      });\n    } finally {\n      this.setState({\n        loading: false,\n        result\n      });\n    }\n  }\n\n  render() {\n    const {\n      result,\n      error,\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(DetailPresenter, {\n      result: result,\n      error: error,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/taehyungkim/Documents/Code/khanflix/src/Routes/Detail/DetailContainer.js"],"names":["moviesApi","tvApi","React","DetailPresenter","Component","constructor","props","location","pathname","state","result","error","loading","isMovie","includes","componentDidMount","match","params","id","history","push","parsedId","parseInt","isNaN","isMove","movieDetail","tvDetail","console","log","setState","render"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,KAApB,QAAiC,KAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,eAAe,cAAcD,KAAK,CAACE,SAApB,CAA8B;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,UAAM;AACJC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA;AAAF;AADN,QAEFF,KAFJ;AAGA,SAAKG,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,IADG;AAEXC,MAAAA,KAAK,EAAE,IAFI;AAGXC,MAAAA,OAAO,EAAE,IAHE;AAIXC,MAAAA,OAAO,EAAEL,QAAQ,CAACM,QAAT,CAAkB,SAAlB;AAJE,KAAb;AAMD;;AAEsB,QAAjBC,iBAAiB,GAAG;AACxB,UAAM;AACJC,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE;AAAEC,UAAAA;AAAF;AADH,OADH;AAIJC,MAAAA,OAAO,EAAE;AAAEC,QAAAA;AAAF;AAJL,QAKF,KAAKd,KALT;AAMA,UAAM;AAAEO,MAAAA;AAAF,QAAc,KAAKJ,KAAzB;AACA,UAAMY,QAAQ,GAAGC,QAAQ,CAACJ,EAAD,CAAzB;;AACA,QAAIK,KAAK,CAACF,QAAD,CAAT,EAAqB;AACnB,aAAOD,IAAI,CAAC,GAAD,CAAX;AACD;;AACD,QAAIV,MAAM,GAAG,IAAb;;AACA,QAAI;AACF,UAAIc,MAAJ,EAAY;AACVd,QAAAA,MAAM,GAAG,MAAMV,SAAS,CAACyB,WAAV,CAAsBJ,QAAtB,CAAf;AACD,OAFD,MAEO;AACLX,QAAAA,MAAM,GAAG,MAAMT,KAAK,CAACyB,QAAN,CAAeL,QAAf,CAAf;AACD;;AACDM,MAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAZ;AACD,KAPD,CAOE,MAAM;AACN,WAAKmB,QAAL,CAAc;AAAElB,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KATD,SASU;AACR,WAAKkB,QAAL,CAAc;AAAEjB,QAAAA,OAAO,EAAE,KAAX;AAAkBF,QAAAA;AAAlB,OAAd;AACD;AACF;;AAEDoB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEpB,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA;AAAjB,QAA6B,KAAKH,KAAxC;AACA,wBAAO,QAAC,eAAD;AAAiB,MAAA,MAAM,EAAEC,MAAzB;AAAiC,MAAA,KAAK,EAAEC,KAAxC;AAA+C,MAAA,OAAO,EAAEC;AAAxD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA5C0C","sourcesContent":["import { moviesApi, tvApi } from \"api\";\nimport React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      location: { pathname },\n    } = props;\n    this.state = {\n      result: null,\n      error: null,\n      loading: true,\n      isMovie: pathname.includes(\"/movie/\"),\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match: {\n        params: { id },\n      },\n      history: { push },\n    } = this.props;\n    const { isMovie } = this.state;\n    const parsedId = parseInt(id);\n    if (isNaN(parsedId)) {\n      return push(\"/\");\n    }\n    let result = null;\n    try {\n      if (isMove) {\n        result = await moviesApi.movieDetail(parsedId);\n      } else {\n        result = await tvApi.tvDetail(parsedId);\n      }\n      console.log(result);\n    } catch {\n      this.setState({ error: \"Can't find anything!\" });\n    } finally {\n      this.setState({ loading: false, result });\n    }\n  }\n\n  render() {\n    const { result, error, loading } = this.state;\n    return <DetailPresenter result={result} error={error} loading={loading} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}